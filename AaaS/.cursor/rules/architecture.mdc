---
description: 
globs: 
alwaysApply: true
---
{
  "name": "AaaS (Agent as a Service)",
  "description": "A job queue service built with Express, Bull, and Redis for handling agent tool execution requests",
  "rules": [
    {
      "name": "Project Structure",
      "description": "The project follows a clean modular structure with dedicated directories for routes, controllers, middleware, queues, config, and services."
    },
    {
      "name": "Package Management",
      "description": "Use pnpm for managing dependencies",
      "rule": "Always use pnpm for package management. Run `pnpm install` to add dependencies and `pnpm run` for scripts."
    },
    {
      "name": "Typescript",
      "description": "The project is built with TypeScript",
      "rule": "Ensure all new files use TypeScript with proper type definitions."
    },
    {
      "name": "API Design",
      "description": "RESTful API design principles",
      "rule": "Follow REST conventions for API endpoints. Controllers handle request/response logic, services handle business logic."
    },
    {
      "name": "Error Handling",
      "description": "Consistent error handling approach",
      "rule": "Use the asyncHandler middleware for async route handlers and let the global error handler manage errors."
    },
    {
      "name": "Queue Management",
      "description": "Using Bull for queue management",
      "rule": "Define jobs with proper interfaces and use the Bull API for queue operations."
    },
    {
      "name": "Environment Configuration",
      "description": "Using dotenv for configuration",
      "rule": "Store configuration in .env file and access via the config module."
    },
    {
      "name": "Testing",
      "description": "Testing guidelines",
      "rule": "Write unit tests for all business logic and integration tests for API endpoints."
    },
    {
      "name": "Middleware Usage",
      "description": "Consistent middleware approach",
      "rule": "Register middleware in app.ts. Custom middleware should be in the middleware directory."
    },
    {
      "name": "Logging",
      "description": "Consistent logging approach",
      "rule": "Use console.log for development. Consider implementing a proper logging service for production."
    },
    {
      "name": "Redis Connection",
      "description": "Redis connection management",
      "rule": "Redis connection details should be configured via environment variables."
    },
    {
      "name": "Development Workflow",
      "description": "Development commands",
      "rule": "Use `pnpm dev` for development with hot reloading and `pnpm build && pnpm start` for production."
    },
    {
      "name": "Documentation",
      "description": "Code documentation standards",
      "rule": "Document all public functions, classes, and interfaces with JSDoc comments."
    }
  ]
}
